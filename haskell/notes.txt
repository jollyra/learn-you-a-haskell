The Haskell Compiler
"A programming languages type system deeply colours the way we think, and write code, in that language."
Haskell types are:
- strong - type strength is the permissiveness of a type system, strong type systems eliminate certain kinds of errors
- static - compiler knows the type of every value at compile time
- inferred - can automatically deduce the type of any expression
"well typed" expressions obey the type rules.
"ill typed" doesn't.
Haskell doesn't automatically coerce values (coercion, casting)
"The haskell compiler proves the absence of type errors"
The process of writing Haskell involves much debugging up front. The many errors help us write correct code.
"fixity" is the combination of precedence and associativity rules.
"infixr, infixl" is right or left associativity
Haskell uses lazy evaluation instead of strict evaluation (like Python). An unevaluated expression is a "thunk" and will not be evaluated unless really needed.
Parametric Polymorphism means a function can have parameters that can later be bound to other types.

The ghci prompt
:set prompt "ghci> "	change the prompt display
:module + Data.Ratio	load a module into ghci
:m +Data.Ratio    shorthand for the same
:info	show the precedence level
:info (+) Show the precedence value of an operator. Operators have a numeric precedence from 1 to 9 (highest)
:type	show type signature
Variables in gchi must be defined with the "let" construct (ghci-specific syntax).
:set +t    print the type of an expression after the expression
:unset +t
"it" is a variable that holds the result of the most recent expression we evaluated.
:? print some help
:add - add a file to ghci
:cd /tmp - change gchi directory (ghci can only look in the directory it was run)

Operators
/= "is not equal to" modelled after the 'â‰ ' from mathematics
not - logical negation
(||) = logical short-circuit OR. Lazy evaluation instead of strict evaluation.
(==) equality comparison (must be of same type on left and right)


Lists
Lists in Haskell must all be of the same type. Lists are surrounded by square brackets and are separated by commas. Lists are also polimorphic since a list can be of any single type.
[1,2,3] a list with 3 integers in it
[] the empty list
[1..10] enumeration notation
(++) list concatination
(:) cons operator, which adds an element to the front of a list (cons is short for construct)
head :: [a] -> a
tail :: [a] -> [a]
last :: [a] -> a
init :: [a] -> [a]
take n - return the first n elements
drop n - return all but the first n elements
length :: [a] -> Int
null :: [a] -> Bool
map :: (a -> b) -> [a] -> [b]
filter :: (a -> Bool) -> [a] -> [a]
Folds take a step function, an initial value for its accumulator, and a list.
foldl :: (a -> b -> a) -> a -> [b] -> a "Chews the list from the left (head)"
foldr :: (a -> b -> b) -> b -> [a] -> b "Chews the list from the right (last)"
elem :: (Eq a) => a -> [a] -> Bool "indicate whether a value is present in a list"
`isInfixOf` :: (Eq a) => [a] -> [a] -> Bool
`isPrefixOf` :: (Eq a) => [a] -> [a] -> Bool
`isSuffixOf` :: (Eq a) => [a] -> [a] -> Bool
zip :: [a] -> [b] -> [(a,b)] "takes two lists and 'zips' them into a list of pairs"
zipWith :: (a -> b -> c) -> [a] -> [b] -> [c] "More useful. Takes 2 lists and applies a function to each pair of elements returning a list"

Strings and Chars
"Text string" Text strings are surrounded by double quotes.
'a' Single characts are surrounded by single quotes.
A text string is just a list of single charaters.
"" empty string ([] is a synonym)
(++) list concatiaton works since strings are lists.

Types
Integer - size bounded only by the size of your system's memory.
'%' e.g. 11 % 29 - Ratio Integer
Some basic types: Char, Bool, Int, Integer, Double.

Tuples
(1964, "labrynths")
() the empty tuple
Convention dicatates we use a limited number of elements in tuple.
Tuples can contain different data types unlike a list which can only contain one type.
fst - return first item in a tuple
snd - return second item in a tuple

Defining a new data type
Example:
	data BookInfo = Book Int String [String]
					deriving (Show)
Explanation:
	BookInfo is the "type constructor". Capitalized.
	Book is the "value constructor" (data constructor). Capitalized.
	Int, String, [String] are the components of the type (fields).
The type constructor and the value constructor often have the same name since the type constructor is only use in a type declaration or a type signature and the value constructor is used in actual code. It is always unambiguous which one we are refering to.

Type Synonyms
Is a synonym for an existing type. E.g. "type CustomerID = Int".
This is purely for making code more readable.

Algebraic Data Types - data types that have more than one value constructor.
The simplest example: Bool
	data Bool = False | True
The multiple value constructors are referred to as "alternatives" or "cases".
Tuples vs. data declatations - Use data declarations when type safety and readability are needed (when you have lots of compound values).
Equivalent to the enums or structs from c/c++.

Local Variables
"let/in" - A lazy expression local to the "in" block.
Variables can be shadowed when nested (not a good idea generally)
"where" clause - Anothe way of introducing variables (more semantic because main logic is presented first).

The Offside Rule
This is how Haskell uses white space and indentation as a cue to parse sections of code.
The Offside Rule is not mandatory since you could use curly braces if you chose.

Pattern Matching
Execute expressions based on a value's shape.
Irrefutable Patterns are patterns that always succeed. E.g the wildcard or single variable patterns.

Guards "|"
These are good for comparing pieces of a value already matched by a pattern.
"otherwise" is a catch-all value bound to True for readability.

as-pattern
'@' e.g. xs@(_:xs') say to yourself, "bind the variable 'xs' to the value that matches the right side of the '@' symbol"

commposition with '.'
`.` :: (b -> c) -> (a -> b) -> a -> c

Lambdas
'\'
\(x:_) -> x

Tail Call Optimization (TCO)
Transforms tail recursive calls to run in constant time.

Regexp
Module is Text.Regex.Posix
`=~` The only function likely needed is the infix regex matching function.
First arg is the text to match, second is the regexp. Can pass either a String or a ByteString as either argument.
`=~' is polymorphic in its return type so ghci needs cannot infer the right type without help.
"my left foot" =~ "foo" :: Bool
String result returns the empty string for no match.
